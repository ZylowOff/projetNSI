
import pygame
import random
import sys
import math

# Initialisation de Pygame
pygame.init()

# Dimensions de la fenêtre
LARGEUR = 1500  # Largeur de la fenêtre
HAUTEUR = 900   # Hauteur de la fenêtre
TAILLE_CASE = 50  # Taille d'une case dans le labyrinthe

# Couleurs utilisées dans le jeu
NOIR = (0, 0, 0)
BLANC = (255, 255, 255)
GRIS = (200, 200, 200)
JOUEUR = (41, 27, 14)
SORTIE = (0, 255, 0)
MUR = (109, 45, 70)
SOL = (115, 109, 115)
CLE = (255, 223, 0)
ENEMIES = (255, 0, 0)
MENUS = (40, 0, 0)


# Création de la fenêtre principale
fenetre = pygame.display.set_mode((LARGEUR, HAUTEUR))
pygame.display.set_caption("Jeu Hôpital")

# Horloge pour contrôler les FPS
horloge = pygame.time.Clock()

# Paramètres de jeu
NOMBRE_CLES = 3  # Nombre de clés à collecter pour gagner
cles_collectees = 0  # Compteur de clés collectées
NOMBRE_ENEMIES = 5

# Paramètres de la vision
cone_angle = 60  # Angle du cône de vision en degrés
cone_length = 375  # Longueur du cône de vision

# Génération initiale
NB_LIGNES = (HAUTEUR // TAILLE_CASE) * 10
NB_COLONNES = (LARGEUR // TAILLE_CASE) * 10
print("NB_LIGNES :", NB_LIGNES, "NB_COLONNES :", NB_COLONNES)  # Vérification
joueur_pos = [NB_COLONNES // 2, NB_LIGNES // 2]
camera_offset = [0, 0]

# Vitesse de déplacement
vitesse = 1
compteur_deplacement = 10

# Initialisation de l'angle de vue avec une valeur par défaut
angle_de_vue = 270  # 0 = droite, 90 = bas, 180 = gauche, 270 = haut
derniere_direction = (0, 0)  # Direction initiale (aucune touche appuyée)

def dessiner_vision_cone(surface, position, angle, length):
    x, y = position
    start_angle = math.radians(angle - cone_angle / 2)
    end_angle = math.radians(angle + cone_angle / 2)
    points = [position]
    steps = 50
    for i in range(steps + 1):
        theta = start_angle + i * (end_angle - start_angle) / steps
        points.append((x + length * math.cos(theta), y + length * math.sin(theta)))
    pygame.draw.polygon(surface, BLANC, points)

def appliquer_masque_vision(surface, position, angle, length):
    # Crée un masque couvrant toute la fenêtre
    masque = pygame.Surface((LARGEUR, HAUTEUR), pygame.SRCALPHA)
    masque.fill((0,0,0,200))  # Remplit le masque de noir opaque

    x, y = position
    start_angle = math.radians(angle - cone_angle / 2)  # Début du cône
    end_angle = math.radians(angle + cone_angle / 2)    # Fin du cône
    points = [position]  # Le sommet du cône (position du joueur)

    # Ajout des points du périmètre du cône
    steps = 50  # Plus de steps = cône plus lisse
    for i in range(steps + 1):
        theta = start_angle + i * (end_angle - start_angle) / steps
        point_x = x + length * math.cos(theta)
        point_y = y + length * math.sin(theta)
        points.append((point_x, point_y))

    # Découpe un trou transparent dans le masque pour le cône de vision
    pygame.draw.polygon(masque, (0, 0, 0, 0), points)  # Zone transparente pour le cône

    # Applique le masque sur l'écran
    surface.blit(masque, (0, 0))

def generer_hopital(nb_lignes, nb_colonnes):
    nb_lignes = (nb_lignes // 3) * 3 + 1  # Ajuste les dimensions pour garantir un labyrinthe valide
    nb_colonnes = (nb_colonnes // 3)* 3 + 1
    hopital = [["#" for _ in range(nb_colonnes)] for _ in range(nb_lignes)]

    def voisins(x, y):
        directions = [(6, 0), (-6, 0), (0, 6), (0, -6)]
        random.shuffle(directions)  # Mélange pour générer des labyrinthes variés
        return [
            (x + dx, y + dy)
            for dx, dy in directions
            if 0 <= x + dx < nb_colonnes and 0 <= y + dy < nb_lignes
        ]

    def départ(x, y):
        for i in range(-1, 2):
            for j in range(-1, 2):
                if 0 <= y + i < nb_lignes and 0 <= x + j < nb_colonnes:
                    hopital[y + i][x + j] = " "
        for nx, ny in voisins(x, y):
            if hopital[ny][nx] == "#":
                for i in range(-1, 2):
                    for j in range(-3, 4):
                        if 0 <= (y + ny) // 2 + i < nb_lignes and 0 <= (x + nx) // 2 + j < nb_colonnes:
                            hopital[(y + ny) // 2 + i][(x + nx) // 2 + j] = " "
                départ(nx, ny)

    départ(nb_colonnes // 2, nb_lignes // 2)  # Commencer au centre du labyrinthe

    # Ajoute une sortie sur un bord aléatoire
    bords = [
        (0, random.randint(1, nb_colonnes - 2)),  # Bord supérieur
        (nb_lignes - 1, random.randint(1, nb_colonnes - 2)),  # Bord inférieur
        (random.randint(1, nb_lignes - 2), 0),  # Bord gauche
        (random.randint(1, nb_lignes - 2), nb_colonnes - 1)  # Bord droit
    ]
    random.shuffle(bords)
    for sortie_y, sortie_x in bords:
        if hopital[sortie_y][sortie_x] == " ":
            hopital[sortie_y][sortie_x] = "S"  # Marque la sortie
            break

    return hopital

# Fonction pour placer les clés dans le labyrinthe
def placer_cles(hopital, nombre_cles):
    cles = []
    cases_vides = [(i, j) for i, ligne in enumerate(hopital) for j, case in enumerate(ligne) if case == " "]
    for _ in range(nombre_cles):
        x, y = random.choice(cases_vides)
        cles.append((x, y))
        hopital[x][y] = "C"  # Ajoute une clé à cet emplacement
        cases_vides.remove((x, y))
    return cles

def placer_enemies(hopital, NOMBRE_ENEMIES):
    enemies = []
    case_vide = [(i, j) for i, ligne in enumerate(hopital) for j, case in enumerate(ligne) if case == " "]
    for j in range(NOMBRE_ENEMIES):
        x, y = random.choice(case_vide)
        enemies.append((x, y))
        hopital[x][y] = "Y"  # Ajoute un enemie à cet emplacement
        case_vide.remove((x, y))
    return enemies

def est_dans_cone(joueur_pos, case_pos, angle, length):
    """Vérifie si une case est dans le cône de vision avec optimisation."""
    joueur_x, joueur_y = joueur_pos
    case_x, case_y = case_pos

    # Vecteur du joueur vers la case
    vecteur_x = case_x - joueur_x
    vecteur_y = case_y - joueur_y
    distance = math.sqrt(vecteur_x**2 + vecteur_y**2)

    if distance > length:  # En dehors de la portée
        return False

    # Calculer l'angle entre la direction du cône et la case
    angle_case = math.degrees(math.atan2(vecteur_y, vecteur_x))
    angle_case = (angle_case + 360) % 360  # Normaliser entre 0 et 360
    angle = angle % 360

    # Vérifier si l'angle est dans la plage du cône
    debut_cone = (angle - cone_angle / 2) % 360
    fin_cone = (angle + cone_angle / 2) % 360

    if debut_cone < fin_cone:
        return debut_cone <= angle_case <= fin_cone
    else:
        return angle_case >= debut_cone or angle_case <= fin_cone

def dessiner_hopital(hopital, joueur_pos, camera_offset):
    """Optimisation du dessin de l'hôpital avec les objets dans le cône de vision."""
    fenetre.fill(NOIR)  # Fond noir
    joueur_x, joueur_y = joueur_pos
    
    # Pré-calculer l'offset de la caméra une seule fois pour chaque case
    camera_x_offset = camera_offset[0]
    camera_y_offset = camera_offset[1]
    
    # Dessiner l'hôpital
    for i, ligne in enumerate(hopital):
        for j, case in enumerate(ligne):
            # Convertir les coordonnées de la case en pixels
            x = j * TAILLE_CASE - camera_x_offset
            y = i * TAILLE_CASE - camera_y_offset

            # Ne vérifier la visibilité que pour les cases contenant des objets spéciaux
            if case == "#":  # Mur
                couleur = MUR
            elif case == " ": # Sol
                couleur = SOL
            else:
                # Vérification de la visibilité uniquement pour les objets spéciaux
                if case == "S":  # Sortie
                    dans_cone = est_dans_cone((joueur_x, joueur_y), (j, i), angle_de_vue, cone_length)
                    couleur = SORTIE if dans_cone else SOL
                elif case == "C":  # Clé
                    dans_cone = est_dans_cone((joueur_x, joueur_y), (j, i), angle_de_vue, cone_length)
                    couleur = CLE if dans_cone else SOL
                elif case == "Y": # Ennemie
                    dans_cone = est_dans_cone((joueur_x, joueur_y), (j, i), angle_de_vue, cone_length)
                    couleur = ENEMIES if dans_cone else SOL
                else:
                    couleur = NOIR

            # Dessiner la case
            pygame.draw.rect(fenetre, couleur, (x, y, TAILLE_CASE, TAILLE_CASE))

    # Dessiner le joueur
    joueur_ecran_x = joueur_x * TAILLE_CASE - camera_x_offset
    joueur_ecran_y = joueur_y * TAILLE_CASE - camera_y_offset
    pygame.draw.rect(fenetre, JOUEUR, (joueur_ecran_x, joueur_ecran_y, TAILLE_CASE, TAILLE_CASE))

# Vérification de la validité du déplacement
def deplacement_valide(hopital, pos):
    x, y = pos
    if 0 <= y < len(hopital) and 0 <= x < len(hopital[0]):
        return hopital[y][x] != "#"
    return False

# Fonction de victoire
def afficher_victoire():
    fenetre.fill(NOIR)
    texte = pygame.font.Font(None, 60).render("Victoire !", True, BLANC)
    texte_rect = texte.get_rect(center=(LARGEUR // 2, HAUTEUR // 2))
    fenetre.blit(texte, texte_rect)
    pygame.display.flip()
    pygame.time.delay(3000)

# Afficher le menu principal
def afficher_menu():
    while True:
        fenetre.fill(NOIR)


        # Titre
        titre = pygame.font.Font(None, 150).render("Creepy Hospital", True, BLANC)
        fenetre.blit(titre, (LARGEUR // 2 - titre.get_width() // 2, HAUTEUR - 700))


        # Récupérer la position de la souris
        souris_x, souris_y = pygame.mouse.get_pos()


        # Boutons
        bouton_paramètres = pygame.Rect(LARGEUR // 2 - 170, 350, 340, 70)
        bouton_jouer = pygame.Rect(LARGEUR // 2 - 230, 440, 460, 100)
        bouton_crédits = pygame.Rect(LARGEUR // 2 - 150, 560, 300, 70)
        bouton_quitter = pygame.Rect(LARGEUR // 2 - 120, 650, 240, 70)


        # Liste des boutons et leurs textes
        boutons = [
            (bouton_paramètres, "Paramètres", 50),
            (bouton_jouer, "Jouer", 100),
            (bouton_crédits, "Crédits", 50),
            (bouton_quitter, "Quitter", 50),
        ]


        for bouton, texte, taille_texte in boutons:
            # Vérifier si la souris est sur le bouton
            if bouton.collidepoint(souris_x, souris_y):
                couleur = (255, 0, 0)  # Rouge
                bouton = bouton.inflate(20, 20)  # Agrandir légèrement le bouton
            else:
                couleur = MENUS


            pygame.draw.rect(fenetre, couleur, bouton)
            texte_rendu = pygame.font.Font(None, taille_texte).render(texte, True, BLANC)
            fenetre.blit(
                texte_rendu,
                (bouton.centerx - texte_rendu.get_width() // 2, bouton.centery - texte_rendu.get_height() // 2),
            )


        pygame.display.flip()


        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if bouton_jouer.collidepoint(event.pos):
                    return
                if bouton_crédits.collidepoint(event.pos):
                    afficher_credits()
                if bouton_quitter.collidepoint(event.pos):
                    pygame.quit()
                    sys.exit()

# Afficher le menu pause
def afficher_menu_pause():
    while True:
        fenetre.fill(NOIR)


        # Récupérer la position de la souris
        souris_x, souris_y = pygame.mouse.get_pos()


        # Boutons
        bouton_continuer = pygame.Rect(LARGEUR // 2 - 250, 230, 520, 100)
        bouton_recommencer = pygame.Rect(LARGEUR // 2 - 210, 350, 440, 70)
        bouton_paramètres = pygame.Rect(LARGEUR // 2 - 170, 440, 360, 60)
        bouton_crédits = pygame.Rect(LARGEUR // 2 - 140, 520, 300, 70)
        bouton_quitter = pygame.Rect(LARGEUR // 2 - 120, 610, 260, 70)


        # Liste des boutons et leurs textes
        boutons = [
            (bouton_continuer, "Continuer", 80),
            (bouton_recommencer, "Recommencer", 60),
            (bouton_paramètres, "Paramètres", 60),
            (bouton_crédits, "Crédits", 50),
            (bouton_quitter, "Quitter", 50),
        ]


        for bouton, texte, taille_texte in boutons:
            # Vérifier si la souris est sur le bouton
            if bouton.collidepoint(souris_x, souris_y):
                couleur = (255, 0, 0)  # Rouge
                bouton = bouton.inflate(20, 20)  # Agrandir légèrement le bouton
            else:
                couleur = MENUS


            pygame.draw.rect(fenetre, couleur, bouton)
            texte_rendu = pygame.font.Font(None, taille_texte).render(texte, True, BLANC)
            fenetre.blit(
                texte_rendu,
                (bouton.centerx - texte_rendu.get_width() // 2, bouton.centery - texte_rendu.get_height() // 2),
            )


        pygame.display.flip()


        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if bouton_continuer.collidepoint(event.pos):
                    return
                if bouton_recommencer.collidepoint(event.pos):
                    return
                if bouton_crédits.collidepoint(event.pos):
                    afficher_credits()
                if bouton_quitter.collidepoint(event.pos):
                    pygame.quit()
                    sys.exit()

def afficher_credits():
    # Afficher un fond noir
    fenetre.fill(NOIR)
    
    # Liste des prénoms
    prenoms = ["Eliott", "Iaroslav", "Mohamed", "Ugo"]
    
    # Police et taille du texte
    police = pygame.font.Font(None, 80)
    
    # Position de départ pour centrer le texte
    y_position = HAUTEUR // 2 - len(prenoms) * 50 // 2
    
    # Affichage des prénoms
    for prenom in prenoms:
        texte = police.render(prenom, True, BLANC)
        texte_rect = texte.get_rect(center=(LARGEUR // 2, y_position))
        fenetre.blit(texte, texte_rect)
        y_position += 50  # Espacement entre chaque prénom

    # Afficher un message pour quitter les crédits
    texte_quitter = pygame.font.Font(None, 40).render("Cliquez pour revenir au menu", True, BLANC)
    texte_quitter_rect = texte_quitter.get_rect(center=(LARGEUR // 2, y_position + 100))
    fenetre.blit(texte_quitter, texte_quitter_rect)

    pygame.display.flip()

    # Attendre que l'utilisateur clique pour revenir au menu
    en_attente = True
    while en_attente:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                en_attente = False  # Revenir au menu principal après un clic

# Génération objet
hopital = generer_hopital(NB_LIGNES, NB_COLONNES)
cles = placer_cles(hopital, NOMBRE_CLES)
enemies = placer_enemies(hopital, NOMBRE_ENEMIES)

# Boucle principale
afficher_menu()
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                choix = afficher_menu_pause()
                if choix == "recommencer":
                    hopital = generer_hopital(NB_LIGNES, NB_COLONNES)
                    cles = placer_cles(hopital, NOMBRE_CLES)
                    joueur_pos = [NB_COLONNES // 2, NB_LIGNES // 2]
                    cles_collectees = 0
                    positions_enemies = []  # Réinitialiser la liste des ennemis

    touches = pygame.key.get_pressed()
    nouvelle_pos = joueur_pos[:]

    # Gestion du mouvement du joueur
    if touches[pygame.K_UP] or touches[pygame.K_z]:
        nouvelle_pos[1] -= 1
        derniere_direction = (0, -1)  # Haut
        angle_de_vue = 270  # Angle de vue vers le haut
    elif touches[pygame.K_DOWN] or touches[pygame.K_s]:
        nouvelle_pos[1] += 1
        derniere_direction = (0, 1)  # Bas
        angle_de_vue = 90  # Angle de vue vers le bas
    elif touches[pygame.K_LEFT] or touches[pygame.K_q]:
        nouvelle_pos[0] -= 1
        derniere_direction = (-1, 0)  # Gauche
        angle_de_vue = 180  # Angle de vue vers la gauche
    elif touches[pygame.K_RIGHT] or touches[pygame.K_d]:
        nouvelle_pos[0] += 1
        derniere_direction = (1, 0)  # Droite
        angle_de_vue = 0  # Angle de vue vers la droite

    # Vérifie si le déplacement est valide
    if deplacement_valide(hopital, nouvelle_pos):
        joueur_pos = nouvelle_pos

    # Mise à jour de la caméra pour suivre le joueur
    camera_offset[0] = joueur_pos[0] * TAILLE_CASE - LARGEUR // 2
    camera_offset[1] = joueur_pos[1] * TAILLE_CASE - HAUTEUR // 2

    # Dessiner l'hôpital
    dessiner_hopital(hopital, joueur_pos, camera_offset)

    # Appliquer le cône de vision
    joueur_centre = (
        joueur_pos[0] * TAILLE_CASE - camera_offset[0] + TAILLE_CASE // 2,
        joueur_pos[1] * TAILLE_CASE - camera_offset[1] + TAILLE_CASE // 2
    )
    appliquer_masque_vision(fenetre, joueur_centre, angle_de_vue, cone_length)

    # Convertir la position du joueur en pixels
    joueur_pos_pixels = (
        joueur_pos[0] * TAILLE_CASE - camera_offset[0] + TAILLE_CASE // 2,
        joueur_pos[1] * TAILLE_CASE - camera_offset[1] + TAILLE_CASE // 2
    )

    # Collecte des clés
    if hopital[joueur_pos[1]][joueur_pos[0]] == "C":
        cles_collectees += 1
        hopital[joueur_pos[1]][joueur_pos[0]] = " "

    # Victoire si le joueur atteint la sortie avec toutes les clés
    if hopital[joueur_pos[1]][joueur_pos[0]] == "S" and cles_collectees == NOMBRE_CLES:
        afficher_victoire()
        running = False


    pygame.display.flip()
    horloge.tick(120)

pygame.quit()
