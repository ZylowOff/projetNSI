import pygame
import random
import sys
import math

# Initialisation de Pygame
pygame.init()

# Dimensions de la fenêtre
LARGEUR = 1500  # Largeur de la fenêtre
HAUTEUR = 900   # Hauteur de la fenêtre
TAILLE_CASE = 50  # Taille d'une case dans le labyrinthe

# Couleurs utilisées dans le jeu
NOIR = (0, 0, 0)
BLANC = (255, 255, 255)
GRIS = (200, 200, 200)
JOUEUR = (41, 27, 14)
SORTIE = (0, 255, 0)
MUR = (26, 0, 8)
SOL = (115, 109, 115)
CLE = (255, 223, 0)

# Création de la fenêtre principale
fenetre = pygame.display.set_mode((LARGEUR, HAUTEUR))
pygame.display.set_caption("Jeu Hôpital")

# Horloge pour contrôler les FPS
horloge = pygame.time.Clock()

# Paramètres de jeu
NOMBRE_CLES = 3  # Nombre de clés à collecter pour gagner
cles_collectees = 0  # Compteur de clés collectées

# Paramètres de la vision
cone_angle = 60  # Angle du cône de vision en degrés
cone_length = 375  # Longueur du cône de vision

def dessiner_vision_cone(surface, position, angle, length):
    x, y = position
    start_angle = math.radians(angle - cone_angle / 2)  # Début du cône
    end_angle = math.radians(angle + cone_angle / 2)    # Fin du cône
    points = [position]  # Le sommet du cône (position du joueur)

    # Ajout des points du périmètre du cône
    steps = 50  # Plus de steps = un cône plus lisse
    for i in range(steps + 1):
        theta = start_angle + i * (end_angle - start_angle) / steps
        point_x = x + length * math.cos(theta)
        point_y = y + length * math.sin(theta)
        points.append((point_x, point_y))

    # Dessiner le cône
    pygame.draw.polygon(surface, BLANC, points, 0)

    masque = pygame.Surface((LARGEUR, HAUTEUR))  # Crée un masque couvrant toute la fenêtre
    masque.fill(NOIR)  # Remplit le masque de noir

    x, y = position
    start_angle = math.radians(angle - cone_angle / 2)  # Début du cône
    end_angle = math.radians(angle + cone_angle / 2)    # Fin du cône
    points = [position]  # Sommet du cône (position du joueur)

    # Ajout des points du périmètre du cône
    steps = 50  # Plus de steps = cône plus lisse
    for i in range(steps + 1):
        theta = start_angle + i * (end_angle - start_angle) / steps
        point_x = x + length * math.cos(theta)
        point_y = y + length * math.sin(theta)
        points.append((point_x, point_y))

    # Découpe un trou dans le masque pour le cône de vision
    pygame.draw.polygon(masque, (0, 0, 0, 0), points)  # Surface transparente pour le cône
    surface.blit(masque, (0, 0))  # Applique le masque sur l'écran

def appliquer_masque_vision(surface, position, angle, length):
    # Crée un masque couvrant toute la fenêtre
    masque = pygame.Surface((LARGEUR, HAUTEUR), pygame.SRCALPHA)
    masque.fill((0,0,0,200))  # Remplit le masque de noir opaque

    x, y = position
    start_angle = math.radians(angle - cone_angle / 2)  # Début du cône
    end_angle = math.radians(angle + cone_angle / 2)    # Fin du cône
    points = [position]  # Le sommet du cône (position du joueur)

    # Ajout des points du périmètre du cône
    steps = 50  # Plus de steps = cône plus lisse
    for i in range(steps + 1):
        theta = start_angle + i * (end_angle - start_angle) / steps
        point_x = x + length * math.cos(theta)
        point_y = y + length * math.sin(theta)
        points.append((point_x, point_y))

    # Découpe un trou transparent dans le masque pour le cône de vision
    pygame.draw.polygon(masque, (0, 0, 0, 0), points)  # Zone transparente pour le cône

    # Applique le masque sur l'écran
    surface.blit(masque, (0, 0))

def dessiner_zone_vision_circulaire(surface, position, rayon):
    x, y = position
    for i in range(-rayon, rayon+1):  # Parcourt chaque case autour du joueur
        for j in range(-rayon, rayon+1):
            # Calcule la distance du joueur à la case
            distance = math.sqrt(i**2 + j**2)
            if distance <= rayon:
                # Si la case est dans le rayon, on la dessine si elle est accessible
                if 0 <= x + i < len(hopital[0]) and 0 <= y + j < len(hopital):
                    case = hopital[y + j][x + i]
                    case_x = (x + i) * TAILLE_CASE
                    case_y = (y + j) * TAILLE_CASE
                    # Dessiner la case en fonction de son type
                    if case == "#":  # Mur
                        pygame.draw.rect(surface, MUR, (case_x, case_y, TAILLE_CASE, TAILLE_CASE))
                    elif case == "S":  # Sortie
                        pygame.draw.rect(surface, SORTIE, (case_x, case_y, TAILLE_CASE, TAILLE_CASE))
                    elif case == "C":  # Clé
                        pygame.draw.rect(surface, CLE, (case_x, case_y, TAILLE_CASE, TAILLE_CASE))
                    elif case == " ":  # Sol
                        pygame.draw.rect(surface, SOL, (case_x, case_y, TAILLE_CASE, TAILLE_CASE))

def generer_hopital(nb_lignes, nb_colonnes):
    """Génère un labyrinthe avec des murs, des chemins et une sortie."""
    nb_lignes = (nb_lignes // 3) * 3 + 1
    nb_colonnes = (nb_colonnes // 3) * 3 + 1
    hopital = [["#" for _ in range(nb_colonnes)] for _ in range(nb_lignes)]

    def voisins(x, y):
        directions = [(6, 0), (-6, 0), (0, 6), (0, -6)]
        random.shuffle(directions)
        return [
            (x + dx, y + dy)
            for dx, dy in directions
            if 0 <= x + dx < nb_colonnes and 0 <= y + dy < nb_lignes
        ]

    def creuser(x, y):
        for i in range(-1, 2):
            for j in range(-1, 2):
                if 0 <= y + i < nb_lignes and 0 <= x + j < nb_colonnes:
                    hopital[y + i][x + j] = " "
        for nx, ny in voisins(x, y):
            if hopital[ny][nx] == "#":
                for i in range(-1, 2):
                    for j in range(-3, 4):
                        if 0 <= (y + ny) // 2 + i < nb_lignes and 0 <= (x + nx) // 2 + j < nb_colonnes:
                            hopital[(y + ny) // 2 + i][(x + nx) // 2 + j] = " "
                creuser(nx, ny)

    creuser(nb_colonnes // 2, nb_lignes // 2)

    # Ajout d'une sortie
    bords = [
        (0, random.randint(1, nb_colonnes - 2)),
        (nb_lignes - 1, random.randint(1, nb_colonnes - 2)),
        (random.randint(1, nb_lignes - 2), 0),
        (random.randint(1, nb_lignes - 2), nb_colonnes - 1)
    ]
    random.shuffle(bords)
    for sortie_y, sortie_x in bords:
        if hopital[sortie_y][sortie_x] == " ":
            hopital[sortie_y][sortie_x] = "S"
            break

    return hopital


def placer_cles(hopital, nombre_cles):
    """Place un certain nombre de clés dans les cases vides du labyrinthe."""
    cles = []
    cases_vides = [(i, j) for i, ligne in enumerate(hopital) for j, case in enumerate(ligne) if case == " "]
    for _ in range(nombre_cles):
        x, y = random.choice(cases_vides)
        cles.append((x, y))
        hopital[x][y] = "C"
        cases_vides.remove((x, y))
    return cles


def est_dans_cone(joueur_pos, case_pos, angle, length):
    """Vérifie si une case est visible dans le cône de vision."""
    joueur_x, joueur_y = joueur_pos
    case_x, case_y = case_pos

    vecteur_x = case_x - joueur_x
    vecteur_y = case_y - joueur_y
    distance = math.sqrt(vecteur_x ** 2 + vecteur_y ** 2)

    if distance > length:
        return False

    angle_case = math.degrees(math.atan2(vecteur_y, vecteur_x)) % 360
    angle = angle % 360

    debut_cone = (angle - cone_angle / 2) % 360
    fin_cone = (angle + cone_angle / 2) % 360

    if debut_cone < fin_cone:
        return debut_cone <= angle_case <= fin_cone
    else:
        return angle_case >= debut_cone or angle_case <= fin_cone


def dessiner_hopital(hopital, joueur_pos, camera_offset):
    """Dessine l'hôpital et le joueur."""
    fenetre.fill(NOIR)

    joueur_x, joueur_y = joueur_pos
    camera_x_offset, camera_y_offset = camera_offset

    for i, ligne in enumerate(hopital):
        for j, case in enumerate(ligne):
            x = j * TAILLE_CASE - camera_x_offset
            y = i * TAILLE_CASE - camera_y_offset

            if case == "#":
                couleur = MUR
            elif case == " ":
                couleur = SOL
            elif case == "S" and est_dans_cone((joueur_x, joueur_y), (j, i), angle_de_vue, cone_length):
                couleur = SORTIE
            elif case == "C" and est_dans_cone((joueur_x, joueur_y), (j, i), angle_de_vue, cone_length):
                couleur = CLE
            else:
                continue

            pygame.draw.rect(fenetre, couleur, (x, y, TAILLE_CASE, TAILLE_CASE))

    joueur_ecran_x = joueur_x * TAILLE_CASE - camera_x_offset
    joueur_ecran_y = joueur_y * TAILLE_CASE - camera_y_offset
    pygame.draw.rect(fenetre, JOUEUR, (joueur_ecran_x, joueur_ecran_y, TAILLE_CASE, TAILLE_CASE))

    texte = pygame.font.Font(None, 40).render(f"Clés: {cles_collectees}/{NOMBRE_CLES}", True, BLANC)
    fenetre.blit(texte, (10, 10))

# Vérification de la validité du déplacement
def deplacement_valide(hopital, pos):
    x, y = pos
    if 0 <= x < len(hopital[0]) and 0 <= y < len(hopital):
        return hopital[y][x] != "#"
    return False

# Fonction de victoire
def afficher_victoire():
    fenetre.fill(NOIR)
    texte = pygame.font.Font(None, 60).render("Victoire !", True, BLANC)
    texte_rect = texte.get_rect(center=(LARGEUR // 2, HAUTEUR // 2))
    fenetre.blit(texte, texte_rect)
    pygame.display.flip()
    pygame.time.delay(3000)

# Afficher le menu principal
def afficher_menu():
    while True:
        fenetre.fill(NOIR)
        
        # Titre
        titre = pygame.font.Font(None, 150).render("Creepy Hospital", True, BLANC)
        fenetre.blit(titre, (LARGEUR // 2 - titre.get_width() // 2, HAUTEUR - 700))

        # Boutons
        bouton_paramètres = pygame.Rect(LARGEUR // 2 - 150, 350, 300, 70)
        bouton_jouer = pygame.Rect(LARGEUR // 2 - 230, 450, 460, 100)  # Bouton agrandi
        bouton_quitter = pygame.Rect(LARGEUR // 2 - 150, 580, 300, 70)  # Bouton agrandi

        # Position de la souris
        mouse_pos = pygame.mouse.get_pos()

        # Changement de couleur si la souris survole un bouton
        couleur_paramètres = (255, 0, 0) if bouton_paramètres.collidepoint(mouse_pos) else MUR
        couleur_jouer = (255, 0, 0) if bouton_jouer.collidepoint(mouse_pos) else MUR
        couleur_quitter = (255, 0, 0) if bouton_quitter.collidepoint(mouse_pos) else MUR

        # Dessin des boutons avec la bonne couleur
        pygame.draw.rect(fenetre, couleur_paramètres, bouton_paramètres)
        pygame.draw.rect(fenetre, couleur_jouer, bouton_jouer)
        pygame.draw.rect(fenetre, couleur_quitter, bouton_quitter)

        # Texte sur les boutons
        texte_paramètres = pygame.font.Font(None, 50).render("Paramètres", True, BLANC)
        texte_jouer = pygame.font.Font(None, 100).render("Jouer", True, BLANC)
        texte_quitter = pygame.font.Font(None, 50).render("Quitter", True, BLANC)

        fenetre.blit(texte_paramètres, (bouton_paramètres.centerx - texte_paramètres.get_width() // 2,
                                        bouton_paramètres.centery - texte_paramètres.get_height() // 2))
        fenetre.blit(texte_jouer, (bouton_jouer.centerx - texte_jouer.get_width() // 2,
                                   bouton_jouer.centery - texte_jouer.get_height() // 2))
        fenetre.blit(texte_quitter, (bouton_quitter.centerx - texte_quitter.get_width() // 2,
                                     bouton_quitter.centery - texte_quitter.get_height() // 2))

        pygame.display.flip()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if bouton_jouer.collidepoint(event.pos):
                    return
                if bouton_quitter.collidepoint(event.pos):
                    pygame.quit()
                    sys.exit()

def afficher_menu_pause():
    while True:
        fenetre.fill(NOIR)

        # Boutons
        bouton_continuer = pygame.Rect(LARGEUR // 2 - 230, 240, 460, 100)
        bouton_recommencer = pygame.Rect(LARGEUR // 2 - 200, 380, 400, 70)
        bouton_paramètres = pygame.Rect(LARGEUR // 2 - 150, 480, 290, 70)
        bouton_quitter = pygame.Rect(LARGEUR // 2 - 120, 580, 230, 70)

        # Position de la souris
        mouse_pos = pygame.mouse.get_pos()

        # Changement de couleur si la souris survole un bouton
        couleur_continuer = (255, 0, 0) if bouton_continuer.collidepoint(mouse_pos) else MUR
        couleur_recommencer = (255, 0, 0) if bouton_recommencer.collidepoint(mouse_pos) else MUR
        couleur_paramètres = (255, 0, 0) if bouton_paramètres.collidepoint(mouse_pos) else MUR
        couleur_quitter = (255, 0, 0) if bouton_quitter.collidepoint(mouse_pos) else MUR

        # Dessin des boutons avec la bonne couleur
        pygame.draw.rect(fenetre, couleur_continuer, bouton_continuer)
        pygame.draw.rect(fenetre, couleur_recommencer, bouton_recommencer)
        pygame.draw.rect(fenetre, couleur_paramètres, bouton_paramètres)
        pygame.draw.rect(fenetre, couleur_quitter, bouton_quitter)

        # Texte sur les boutons
        texte_continuer = pygame.font.Font(None, 80).render("Continuer", True, BLANC)
        texte_recommencer = pygame.font.Font(None, 60).render("Recommencer", True, BLANC)
        texte_paramètres = pygame.font.Font(None, 60).render("Paramètres", True, BLANC)
        texte_quitter = pygame.font.Font(None, 50).render("Quitter", True, BLANC)

        fenetre.blit(texte_continuer, (bouton_continuer.centerx - texte_continuer.get_width() // 2,
                                       bouton_continuer.centery - texte_continuer.get_height() // 2))
        fenetre.blit(texte_recommencer, (bouton_recommencer.centerx - texte_recommencer.get_width() // 2,
                                         bouton_recommencer.centery - texte_recommencer.get_height() // 2))
        fenetre.blit(texte_paramètres, (bouton_paramètres.centerx - texte_paramètres.get_width() // 2,
                                        bouton_paramètres.centery - texte_paramètres.get_height() // 2))
        fenetre.blit(texte_quitter, (bouton_quitter.centerx - texte_quitter.get_width() // 2,
                                     bouton_quitter.centery - texte_quitter.get_height() // 2))

        pygame.display.flip()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if bouton_continuer.collidepoint(event.pos):
                    return "continuer"
                if bouton_recommencer.collidepoint(event.pos):
                    return "recommencer"
                if bouton_quitter.collidepoint(event.pos):
                    pygame.quit()
                    sys.exit()



# Génération initiale
NB_LIGNES = (HAUTEUR // TAILLE_CASE) * 10
NB_COLONNES = (LARGEUR // TAILLE_CASE) * 10
hopital = generer_hopital(NB_LIGNES, NB_COLONNES)
cles = placer_cles(hopital, NOMBRE_CLES)
joueur_pos = [NB_COLONNES // 2, NB_LIGNES // 2]
camera_offset = [0, 0]

# Vitesse de déplacement
vitesse = 1
compteur_deplacement = 10

# Initialisation de l'angle de vue avec une valeur par défaut
angle_de_vue = 270  # 0 = droite, 90 = bas, 180 = gauche, 270 = haut
derniere_direction = (0, 0)  # Direction initiale (aucune touche appuyée)

# Définir le rayon de la zone de vision circulaire (vous pouvez ajuster cette valeur)
rayon_vision_circulaire = 40  # Exemple : rayon de 100 pixels

# Boucle principale
# Ajout de la gestion de l'angle de vue basé sur la position de la souris
def calculer_angle_vue(joueur_pos, souris_pos):
    """Calcule l'angle de vue entre le joueur et la position de la souris."""
    joueur_x, joueur_y = joueur_pos
    souris_x, souris_y = souris_pos

    dx = souris_x - joueur_x
    dy = souris_y - joueur_y
    return math.degrees(math.atan2(dy, dx))

# Ajout dans la boucle principale
angle_de_vue = 0  # Initialisation de l'angle de vue

# Boucle principale du jeu
joueur_pos = (NB_COLONNES // 2, NB_LIGNES // 2)  # Position initiale du joueur
camera_offset = (0, 0)  # Offset initial de la caméra
cles = placer_cles(hopital, NOMBRE_CLES)  # Placement des clés

afficher_menu()

running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                action = afficher_menu_pause()
                if action == "recommencer":
                    # Réinitialisation
                    hopital = generer_hopital(NB_LIGNES, NB_COLONNES)
                    cles = placer_cles(hopital, NOMBRE_CLES)
                    joueur_pos = (NB_COLONNES // 2, NB_LIGNES // 2)
                    cles_collectees = 0
                elif action == "continuer":
                    continue

    # Suivi de la souris
    souris_pos = pygame.mouse.get_pos()
    joueur_ecran_x = joueur_pos[0] * TAILLE_CASE - camera_offset[0]
    joueur_ecran_y = joueur_pos[1] * TAILLE_CASE - camera_offset[1]
    angle_de_vue = calculer_angle_vue((joueur_ecran_x, joueur_ecran_y), souris_pos)

    # Gestion des touches pour déplacer le joueur
    touches = pygame.key.get_pressed()
    x, y = joueur_pos
    if touches[pygame.K_UP] and deplacement_valide(hopital, (x, y - 1)):
        joueur_pos = (x, y - 1)
    if touches[pygame.K_DOWN] and deplacement_valide(hopital, (x, y + 1)):
        joueur_pos = (x, y + 1)
    if touches[pygame.K_LEFT] and deplacement_valide(hopital, (x - 1, y)):
        joueur_pos = (x - 1, y)
    if touches[pygame.K_RIGHT] and deplacement_valide(hopital, (x + 1, y)):
        joueur_pos = (x + 1, y)

    # Mise à jour de la caméra pour centrer le joueur
    camera_offset = (
        joueur_pos[0] * TAILLE_CASE - LARGEUR // 2,
        joueur_pos[1] * TAILLE_CASE - HAUTEUR // 2,
    )

    # Dessiner l'hôpital
    dessiner_hopital(hopital, joueur_pos, camera_offset)

    # Appliquer le cône de vision
    joueur_centre = (
        joueur_pos[0] * TAILLE_CASE - camera_offset[0] + TAILLE_CASE // 2,
        joueur_pos[1] * TAILLE_CASE - camera_offset[1] + TAILLE_CASE // 2
    )
    appliquer_masque_vision(fenetre, joueur_centre, angle_de_vue, cone_length)

    # Convertir la position du joueur en pixels
    joueur_pos_pixels = (
        joueur_pos[0] * TAILLE_CASE - camera_offset[0] + TAILLE_CASE // 2,
        joueur_pos[1] * TAILLE_CASE - camera_offset[1] + TAILLE_CASE // 2
    )
    dessiner_zone_vision_circulaire(fenetre, joueur_pos_pixels, rayon_vision_circulaire)

    # Dessiner la zone circulaire de vision autour du joueur
    dessiner_zone_vision_circulaire(fenetre, joueur_pos_pixels, rayon_vision_circulaire)

    # Collecte des clés
    if hopital[joueur_pos[1]][joueur_pos[0]] == "C":
        cles_collectees += 1
        hopital[joueur_pos[1]][joueur_pos[0]] = " "

    
# Victoire si le joueur atteint la sortie avec toutes les clés
    if hopital[joueur_pos[1]][joueur_pos[0]] == "S" and cles_collectees == NOMBRE_CLES:
        afficher_victoire()
        running = False

    # Mise à jour graphique
    dessiner_hopital(hopital, joueur_pos, camera_offset)
    appliquer_masque_vision(fenetre, (joueur_ecran_x, joueur_ecran_y), angle_de_vue, cone_length)
    pygame.display.flip()
    horloge.tick(60)

pygame.quit()
sys.exit()
