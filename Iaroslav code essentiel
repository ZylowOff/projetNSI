import pygame
import random
import sys

# Initialisation de Pygame
pygame.init()

# Dimensions de la fenêtre
LARGEUR = 800
HAUTEUR = 600
TAILLE_CASE = 50

# Couleurs
NOIR = (0, 0, 0)
BLANC = (255, 255, 255)
GRIS = (200, 200, 200)
JOUEUR = (41, 27, 14)
SORTIE = (0, 255, 0)
MUR = (26, 0, 8)
SOL = (115, 109, 115)
CLE = (255, 223, 0)
ROUGE = (255, 0, 0)

# Création de la fenêtre
fenetre = pygame.display.set_mode((LARGEUR, HAUTEUR))
pygame.display.set_caption("Jeu Hôpital")

# Horloge pour contrôler le FPS
horloge = pygame.time.Clock()

# Nombre de clés
NOMBRE_CLES = 3
cles_collectees = 0

# Génération d'un labyrinthe aléatoire
def generer_hopital(nb_lignes, nb_colonnes):
    nb_lignes = (nb_lignes // 3) * 3 + 1
    nb_colonnes = (nb_colonnes // 3) * 3 + 1
    hopital = [["#" for _ in range(nb_colonnes)] for _ in range(nb_lignes)]

    def voisins(x, y):
        directions = [(6, 0), (-6, 0), (0, 6), (0, -6)]
        random.shuffle(directions)
        return [
            (x + dx, y + dy)
            for dx, dy in directions
            if 0 <= x + dx < nb_colonnes and 0 <= y + dy < nb_lignes
        ]

    def creuser(x, y):
        for i in range(-1, 2):
            for j in range(-1, 2):
                if 0 <= y + i < nb_lignes and 0 <= x + j < nb_colonnes:
                    hopital[y + i][x + j] = " "

        for nx, ny in voisins(x, y):
            if hopital[ny][nx] == "#":
                for i in range(-1, 2):
                    for j in range(-3, 4):
                        if 0 <= (y + ny) // 2 + i < nb_lignes and 0 <= (x + nx) // 2 + j < nb_colonnes:
                            hopital[(y + ny) // 2 + i][(x + nx) // 2 + j] = " "
                creuser(nx, ny)

    creuser(nb_colonnes // 2, nb_lignes // 2)

    # Ajouter la sortie
    coins = [(0, 0), (0, nb_colonnes - 1), (nb_lignes - 1, 0), (nb_lignes - 1, nb_colonnes - 1)]
    random.shuffle(coins)

    for sortie_y, sortie_x in coins:
        if hopital[sortie_y][sortie_x] == " ":
            hopital[sortie_y][sortie_x] = "S"
            break

    return hopital

# Placement des clés
def placer_cles(hopital, nombre_cles):
    cles = []
    cases_vides = [(i, j) for i, ligne in enumerate(hopital) for j, case in enumerate(ligne) if case == " "]
    for _ in range(nombre_cles):
        x, y = random.choice(cases_vides)
        cles.append((x, y))
        hopital[x][y] = "C"
        cases_vides.remove((x, y))
    return cles

# Dessin de l'hôpital
def dessiner_hopital(hopital, joueur_pos, camera_offset):
    fenetre.fill(NOIR)
    joueur_x, joueur_y = joueur_pos
    for i, ligne in enumerate(hopital):
        for j, case in enumerate(ligne):
            distance_x = abs(j - joueur_x)
            distance_y = abs(i - joueur_y)
            if distance_x <= 4 and distance_y <= 4:
                x = j * TAILLE_CASE - camera_offset[0]
                y = i * TAILLE_CASE - camera_offset[1]
                if case == "#":
                    pygame.draw.rect(fenetre, MUR, (x, y, TAILLE_CASE, TAILLE_CASE))
                elif case == "S":
                    pygame.draw.rect(fenetre, SORTIE, (x, y, TAILLE_CASE, TAILLE_CASE))
                elif case == " ":
                    pygame.draw.rect(fenetre, SOL, (x, y, TAILLE_CASE, TAILLE_CASE))
                elif case == "C":
                    pygame.draw.rect(fenetre, CLE, (x, y, TAILLE_CASE, TAILLE_CASE))

    joueur_ecran_x = joueur_x * TAILLE_CASE - camera_offset[0]
    joueur_ecran_y = joueur_y * TAILLE_CASE - camera_offset[1]
    pygame.draw.rect(fenetre, JOUEUR, (joueur_ecran_x, joueur_ecran_y, TAILLE_CASE, TAILLE_CASE))

    # Afficher le compteur de clés
    texte = pygame.font.Font(None, 40).render(f"Clés: {cles_collectees}/{NOMBRE_CLES}", True, BLANC)
    fenetre.blit(texte, (10, 10))

# Vérification de la validité du déplacement
def deplacement_valide(hopital, pos):
    x, y = pos
    if 0 <= x < len(hopital[0]) and 0 <= y < len(hopital):
        return hopital[y][x] != "#"
    return False

# Fonction de victoire
def afficher_victoire():
    fenetre.fill(NOIR)
    texte = pygame.font.Font(None, 60).render("Victoire !", True, BLANC)
    texte_rect = texte.get_rect(center=(LARGEUR // 2, HAUTEUR // 2))
    fenetre.blit(texte, texte_rect)
    pygame.display.flip()
    pygame.time.delay(3000)

# Afficher le menu principal
def afficher_menu():
    while True:
        fenetre.fill(NOIR)

        # Titre
        titre = pygame.font.Font(None, 80).render("Jeu Hôpital", True, BLANC)
        fenetre.blit(titre, (LARGEUR // 2 - titre.get_width() // 2, 100))

        # Boutons
        bouton_jouer = pygame.Rect(LARGEUR // 2 - 100, 250, 200, 60)
        bouton_quitter = pygame.Rect(LARGEUR // 2 - 100, 350, 200, 60)
        pygame.draw.rect(fenetre, GRIS, bouton_jouer)
        pygame.draw.rect(fenetre, GRIS, bouton_quitter)

        texte_jouer = pygame.font.Font(None, 50).render("Jouer", True, BLANC)
        texte_quitter = pygame.font.Font(None, 50).render("Quitter", True, BLANC)
        fenetre.blit(texte_jouer, (bouton_jouer.centerx - texte_jouer.get_width() // 2, bouton_jouer.centery - texte_jouer.get_height() // 2))
        fenetre.blit(texte_quitter, (bouton_quitter.centerx - texte_quitter.get_width() // 2, bouton_quitter.centery - texte_quitter.get_height() // 2))

        pygame.display.flip()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if bouton_jouer.collidepoint(event.pos):
                    return
                if bouton_quitter.collidepoint(event.pos):
                    pygame.quit()
                    sys.exit()

# Afficher le menu pause
def afficher_menu_pause():
    while True:
        fenetre.fill(NOIR)

        # Boutons
        bouton_continuer = pygame.Rect(LARGEUR // 2 - 100, 200, 200, 60)
        bouton_recommencer = pygame.Rect(LARGEUR // 2 - 100, 300, 200, 60)
        bouton_quitter = pygame.Rect(LARGEUR // 2 - 100, 400, 200, 60)

        pygame.draw.rect(fenetre, GRIS, bouton_continuer)
        pygame.draw.rect(fenetre, GRIS, bouton_recommencer)
        pygame.draw.rect(fenetre, GRIS, bouton_quitter)

        texte_continuer = pygame.font.Font(None, 50).render("Continuer", True, BLANC)
        texte_recommencer = pygame.font.Font(None, 50).render("Recommencer", True, BLANC)
        texte_quitter = pygame.font.Font(None, 50).render("Quitter", True, BLANC)

        fenetre.blit(texte_continuer, (bouton_continuer.centerx - texte_continuer.get_width() // 2, bouton_continuer.centery - texte_continuer.get_height() // 2))
        fenetre.blit(texte_recommencer, (bouton_recommencer.centerx - texte_recommencer.get_width() // 2, bouton_recommencer.centery - texte_recommencer.get_height() // 2))
        fenetre.blit(texte_quitter, (bouton_quitter.centerx - texte_quitter.get_width() // 2, bouton_quitter.centery - texte_quitter.get_height() // 2))

        pygame.display.flip()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if bouton_continuer.collidepoint(event.pos):
                    return "continuer"
                if bouton_recommencer.collidepoint(event.pos):
                    return "recommencer"
                if bouton_quitter.collidepoint(event.pos):
                    pygame.quit()
                    sys.exit()

# Génération initiale
NB_LIGNES = (HAUTEUR // TAILLE_CASE) * 10
NB_COLONNES = (LARGEUR // TAILLE_CASE) * 10
hopital = generer_hopital(NB_LIGNES, NB_COLONNES)
cles = placer_cles(hopital, NOMBRE_CLES)
joueur_pos = [NB_COLONNES // 2, NB_LIGNES // 2]
camera_offset = [0, 0]

# Boucle principale
afficher_menu()
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                choix = afficher_menu_pause()
                if choix == "recommencer":
                    hopital = generer_hopital(NB_LIGNES, NB_COLONNES)
                    cles = placer_cles(hopital, NOMBRE_CLES)
                    joueur_pos = [NB_COLONNES // 2, NB_LIGNES // 2]
                    cles_collectees = 0

    touches = pygame.key.get_pressed()
    nouvelle_pos = joueur_pos[:]
    if touches[pygame.K_UP]:
        nouvelle_pos[1] -= 1
    elif touches[pygame.K_DOWN]:
        nouvelle_pos[1] += 1
    elif touches[pygame.K_LEFT]:
        nouvelle_pos[0] -= 1
    elif touches[pygame.K_RIGHT]:
        nouvelle_pos[0] += 1

    if deplacement_valide(hopital, nouvelle_pos):
        joueur_pos = nouvelle_pos

    # Collecte des clés
    if hopital[joueur_pos[1]][joueur_pos[0]] == "C":
        cles_collectees += 1
        hopital[joueur_pos[1]][joueur_pos[0]] = " "

    # Victoire si le joueur atteint la sortie avec toutes les clés
    if hopital[joueur_pos[1]][joueur_pos[0]] == "S" and cles_collectees == NOMBRE_CLES:
        afficher_victoire()
        running = False

    camera_offset[0] = joueur_pos[0] * TAILLE_CASE - LARGEUR // 2
    camera_offset[1] = joueur_pos[1] * TAILLE_CASE - HAUTEUR // 2

    dessiner_hopital(hopital, joueur_pos, camera_offset)
    pygame.display.flip()
    horloge.tick(60)

pygame.quit()
